/* Copyright 2023 Tapish Narwal
 *
 * This file is part of PMacc.
 *
 * PMacc is free software: you can redistribute it and/or modify
 * it under the terms of either the GNU General Public License or
 * the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * PMacc is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License and the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License
 * and the GNU Lesser General Public License along with PMacc.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include <pmacc/lockstep.hpp>
#include <pmacc/mappings/threads/ThreadCollective.hpp>
#include <pmacc/math/Vector.hpp>
#include <pmacc/math/operation.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>

namespace picongpu {
    
    // template<typename T_BlockDescription>
    struct Stencil
    {
        /** run a 4 point stencil for a supercell
        */
        template<typename T_Box, typename T_Mapping, typename T_Worker>
        DINLINE void operator()(
            const T_Worker& worker,
            T_Box field,
            uint32_t currentStep,
            const T_Mapping& mapper) const
        {
            using SuperCellSize = typename T_Mapping::SuperCellSize;
            constexpr uint32_t cellsPerSuperCell = pmacc::math::CT::volume<SuperCellSize>::type::value;

            // get position in grid in units of SuperCells from blockID
            const DataSpace<simDim> superCellIdx(mapper.getSuperCellIndex(worker.blockDomIdxND()));

            // convert position in unit of cells
            DataSpace<simDim> SuperCellSizeValue = SuperCellSize::toRT();
            DataSpace<simDim> const blockCell = superCellIdx * SuperCellSizeValue;

            pmacc::lockstep::makeForEach<cellsPerSuperCell>(worker)(
                [&](int32_t const linearIdx)
                {
                    DataSpace<DIM3> const cellIdxInSupercell = pmacc::math::mapToND(SuperCellSize::toRT(), linearIdx);
                    auto index = cellIdxInSupercell + blockCell;
                    auto pos = cellIdxInSupercell + blockCell - SuperCellSize::toRT();

                    double fieldValue = pmacc::math::sin(currentStep * 0.4);

                    if (index.x() - SuperCellSizeValue.x() == 300 && index.y() - SuperCellSizeValue.y() == 300)
                    {
                        field(index) = {0, 0, fieldValue};
                    }
                });

        };
    };
} // namespace picongpu